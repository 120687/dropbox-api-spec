namespace sharing
    "This namespace contains endpoints and data types for creating and managing
    shared links."

import common
import files
import users

alias SharedFolderId = String(pattern="[-_0-9a-zA-Z]+")

union Visibility
    "Who can access a shared link.
    The most open visibility is :field:`public`.
    The default depends on many aspects, such as team and user
    preferences and shared folder settings."

    public
        "Anyone who has received the link can access it. No login required."
    team_only
        "Only members of the same DfB (Dropbox for Business) team can
        access the link. Login is required."
    password
        "A link-specific password is required to access the
        link. Login is not required."
    team_and_password
        "Only members of the same DfB (Dropbox for Business) team who
        have the link-specific password can access the link."
    shared_folder_only
        "Only members of the shared folder containing the linked file
        can access the link. Login is required."
    other*
        "An unknown restriction is in place."

struct LinkMetadata
    "Metadata for a shared link. This can be either a
    :type:`PathLinkMetadata` or :type:`CollectionLinkMetadata`."

    union*
        path PathLinkMetadata
        collection CollectionLinkMetadata

    url String
        "URL of the shared link."
    visibility Visibility
        "Who can access the link."
    expires common.DropboxTimestamp?
        "Expiration time, if set. By default the link won't expire."

struct PathLinkMetadata extends LinkMetadata
    "Metadata for a path-based shared link."

    path String
        "Path in user's Dropbox."

    example default
        url = "https://www.dropbox.com/4x4kjyl1udi33jt/AACqw4NCzgwpCHeKtVlv6o6Pa?dl=0"
        path = "/Homework/math/prime_numbers.txt"
        expires = null
        visibility = public

struct CollectionLinkMetadata extends LinkMetadata
    "Metadata for a collection-based shared link."

    example default
        url = "https://www.dropbox.com/s6fvw6ol7rmqo1x/AAAgWRSbjmYDvPpDB30Sykjfa?dl=0"
        expires = null
        visibility = public

struct GetSharedLinksArg
    "Arguments for :route:`get_shared_links`."

    path String?
        "See :route:`get_shared_links` description."

    example default  "Get all links, including collection links"
        path = ""

    example math_homework_links  "Get links giving access to /Homework/math"
        path = "/Homework/math"

struct GetSharedLinksResult
    "Result for :route:`get_shared_links`."

    links List(LinkMetadata)
        "Shared links applicable to the path argument."

union GetSharedLinksError
    path files.MalformedPathError
    other*

route get_shared_links(GetSharedLinksArg, GetSharedLinksResult, GetSharedLinksError)
    "Returns a list of :type:`LinkMetadata` objects for this user,
    including collection links.

    If no path is given or the path is empty, returns a list of all
    shared links for the current user, including collection links.

    If a non-empty path is given, returns a list of all shared links
    that allow access to the given path.  Collection links are never
    returned in this case.

    Note that the url field in the response is never the shortened URL.

    This API is not supported for App Folder and filetypes apps."

union PendingUploadMode
    "Flag to indicate pending upload default (for linking to not-yet-existing paths)."

    file
        "Assume pending uploads are files."
    folder
        "Assume pending uploads are folders."

# TODO: Add optional expiration and visibility?
struct CreateSharedLinkArg
    "Arguments for :route:`create_shared_link`."

    path String
        "The path to share."
    short_url Boolean = false
        "Whether to return a shortened URL."
    pending_upload PendingUploadMode?
        # TODO: Use :val: once it supports union field names.
        "If it's okay to share a path that does not yet exist, set
        this to either 'file' or 'folder' to indicate whether to
        assume it's a file or folder."

    example default
        path = "/Homework/math/prime_numbers.txt"

union CreateSharedLinkError
    path files.LookupError
    other*

route create_shared_link(CreateSharedLinkArg, PathLinkMetadata, CreateSharedLinkError)
    "Create a shared link.

    If a shared link already exists for the given path, that link is returned.

    Note that in the returned :type:`PathLinkMetadata`, the url field
    is the shortened URL if the short_url argument is set to
    :val:`true`.

    This API is not supported for App Folder and filetypes apps."

#
# Shared folders
#

union AccessType
    "The access type fo this shared folder. Each type is associated
    with specific access permission."

    owner
        "The member is the owner of the shared folder. The user can both
        view and edit the shared folder."
    editor
        "The member can both view and edit the shared folder."
    viewer
        "The member can only view the shared folder."
    other*
        "An unknown access type."

union SharedLinkPolicy
    "Policy governing who can links be shared with."

    all
        "Links can be shared with anyone."
    members_only
        "Links can only be shared among members of the shared folder."
    other*
        "An unknown shared link policy."

struct MembershipInfo
    "The information about a member of the shared folder."

    access_type AccessType
        "This access type for this user member."

    example default
        access_type = owner

struct UserInfo
    "The information about a user."

    account_id users.AccountId
        "The account ID of the user."
    display_name String
        "The display name of the user."
    same_team Boolean
        "If the user is in the same team as current user."
    member_id String?
        "The member id of the user for the shared folder. This field
        will only present if same_team field is true."

    example default
        account_id = "dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc"
        display_name = "Test user"
        same_team = true
        member_id = "dbmid:abcd1234"

struct UserMembershipInfo extends MembershipInfo
    "The information about a user member of the shared folder."

    user UserInfo
        "The account information for the membership user."
    active Boolean
        "If this membership is active. When the field is false, it means the
        user has left the shared folder (but may still rejoin)."

    example default
        user = default
        active = true
        access_type = owner

struct GroupInfo
    "The information about a group. Group is a way to manage a list of users
     who need same access permission to the shared folder."

    display_name String
        "The display name of the group."
    id String
        "The ID of the group."
    member_count Int64
        "The total number of member for this group."
    same_team Boolean
        "If all members of the group are in the same team as current user."

    example default
        display_name = "Test group"
        id = "g:e2db7665347abcd600000000001a2b3c"
        member_count = 10
        same_team = true

struct GroupMembershipInfo extends MembershipInfo
    "The information about a group member of the shared folder."

    group GroupInfo
        "The information about the membership group."

    example default
        group = default
        access_type = editor

struct SharedFolderMetadata
    "The base type for shared folder metadata."

    union
        basic BasicSharedFolderMetadata
        full FullSharedFolderMetadata

    path_lower String
        "The lower-cased full path of this shared folder."
    name String
        "The name of the this shared folder."
    id SharedFolderId
        "The ID of the shared folder."
    access_type AccessType
        "Who can access this shared folder."
    shared_link_policy SharedLinkPolicy
        "Who links can be shared with."

    example default
        basic = default

struct BasicSharedFolderMetadata extends SharedFolderMetadata
    "The metadata which includes basic information about the shared folder."

    example default
        path_lower = "/dir"
        name = "dir"
        id = "15432343"
        access_type = owner
        shared_link_policy = all

struct FullSharedFolderMetadata extends SharedFolderMetadata
    "The full metadata for the shared folder which includes user and group
    membership."

    membership List(UserMembershipInfo)
        "The list of user members of the shared folder."
    groups List(GroupMembershipInfo)
        "The list of group members of the shared folder."

    example default
        path_lower = "/dir"
        name = "dir"
        id = "15432343"
        access_type = owner
        shared_link_policy = all

union SharedFolderAccessError
    "There is an error accessing the shared folder."

    invalid_id
        "This shared folder ID is invalid."
    not_member
        "The user is not a member of the shared folder
        thus cannot access it."
    has_left
        "The user has left the shared folder already thus is
        no longer able to access it."
    require_owner
        "The user needs to be the owner to access the shared folder."
    is_root
        "The folder is a root folder and cannot be shared."
    is_team_shared_folder
        "The folder is a team shared folder and the user cannot access it."
    is_app_folder
        "The folder is an app folder and cannot be shared."

# Get shared folder route

struct GetSharedFolderArgs
    "Arguments for :route:`get_shared_folder`."

    id SharedFolderId
        "The ID for the shared folder."
    include_membership Boolean = true
        "If include user and group membership information in the response."

    example default
        id = "15432343"
        include_membership = true

route get_shared_folder(GetSharedFolderArgs, SharedFolderMetadata, SharedFolderAccessError)
    "Gets shared folder by its folder ID."

# List shared folders route

struct ListSharedFoldersArgs
    "Arguments for :route:`list_shared_folders`."

    include_membership Boolean = false
        "If include user and group membership information in the response."

    example default
        include_membership = false

struct ListSharedFoldersResult
    "Result for :route:`list_shared_folders`."

    entries List(SharedFolderMetadata)
        "List of all shared folders the authenticated user has access to."

route list_shared_folders(ListSharedFoldersArgs, ListSharedFoldersResult, Void)
    "Return the list of all shared folders the authenticated user has access to."
